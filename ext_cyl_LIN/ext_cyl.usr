!-----------------------------------------------------------------------
!
!  USER SPECIFIED ROUTINES:
!
!     - boundary conditions
!     - initial conditions
!     - variable properties
!     - local acceleration for fluid (a)
!     - forcing function for passive scalar (q)
!     - general purpose routine for checking errors etc.
!
!-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      udiff =0.
      utrans=0.
      return
      end
!-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

!     Note: this is an acceleration term, NOT a force!
!     Thus, ffx will subsequently be multiplied by rho(x,t).
      integer iel

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

!     add sponge
      call spng_forcing(FFX,FFY,FFZ,ix,iy,iz,ieg)
      
      return
      end
!-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol   = 0.0

      return
      end
!-----------------------------------------------------------------------
      subroutine userchk
      implicit none
      include 'SIZE'
      include 'TSTEP'
      include 'INPUT'
      include 'SOLN'
      include 'MASS'

!     local variables
      integer nn, nit
      real ek

!     functions
      real glsc3
      
      if (ISTEP.eq.0) then
!     start framework
         call frame_start
      endif

!     monitor simulation
      call frame_monitor

!     save/load files for full-restart
      call chkpt_main

!     write perturbation energy
      nit = 10
      if (mod(ISTEP,nit).eq.0) then
         nn = NX1*NY1*NZ1*NELV
         ek =  0.5*(glsc3(VXP,VXP,BM1,nn)+glsc3(VYP,VYP,BM1,nn))
         if (NIO.eq.0) write(*,*) 'Perturbation energy = ',ek,time
      endif

      if (mod(ISTEP,IOSTEP).eq.0) then
         call outpost2(VXP,VYP,VZP,PRP,TP,0,'prt')
      endif

!     finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end
      endif
      
      return
      end
!-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'NEKUSE'
      include 'SOLN'            ! JP
      
      if (JP.eq.0) then
!     base flow
         ux=1.0
         uy=0.0
         uz=0.0
         temp=0.0
      else
!     perturbation
         ux=0.0
         uy=0.0
         uz=0.0
         temp=0.0
      endif
      
      return
      end
!-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'
      include 'SOLN'            ! JP
      include 'INPUT'

!     argument list
      integer ix,iy,iz,ieg

!     local variables
      real xl(LDIM)
      real fcoeff(3)            ! coefficients for random distribution
 
!     functions
      real math_ran_dst
      
      if (JP.eq.0) then
!     base flow; there is no analytical formula, so 
!     it should be read from file during initialisation step
         ux=1.0
         uy=0.0
         uz=0.0
         temp=0
      else
!     perturbation; white noise
         xl(1) = X
         xl(2) = Y
         if (IF3D) xl(NDIM) = Z

         fcoeff(1)=  3.0e4
         fcoeff(2)= -1.5e3
         fcoeff(3)=  0.5e5
         ux=UPARAM(1)*math_ran_dst(ix,iy,iz,ieg,xl,fcoeff)
         fcoeff(1)=  2.3e4
         fcoeff(2)=  2.3e3
         fcoeff(3)= -2.0e5
         uy=UPARAM(1)*math_ran_dst(ix,iy,iz,ieg,xl,fcoeff)
         if (IF3D) then
            fcoeff(1)= 2.e4
            fcoeff(2)= 1.e3
            fcoeff(3)= 1.e5
            uz=UPARAM(1)*math_ran_dst(il,jl,kl,ieg,xl,fcoeff)
         else
            uz = 0.0
         endif

         temp=0.0
      endif
      
      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'

      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'

      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'

      return
      end
!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     register modules
      call chkpt_register
      call spng_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'

      ! local variables
      integer nn
      real vtmp(lx1*ly1*lz1*lelt,ldim)
      common /CTMP1/ vtmp
!-----------------------------------------------------------------------
!     initialise modules
      call chkpt_init
      nn = lx1*ly1*lz1*lelt*ldim
      call rzero(vtmp,nn)
      call spng_init(vtmp(1,1),vtmp(1,2),vtmp(1,ndim))

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------

      return
      end subroutine
!======================================================================

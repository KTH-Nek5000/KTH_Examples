c-----------------------------------------------------------------------
C
C  USER SPECIFIED ROUTINES:
C
C     - boundary conditions
C     - initial conditions
C     - variable properties
C     - local acceleration for fluid (a)
C     - forcing function for passive scalar (q)
C     - general purpose routine for checking errors etc.
C
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      udiff =0.
      utrans=0.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).


      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

!     add sponge
      call spng_box_forcing(FFX,FFY,FFZ,ix,iy,iz,ieg)
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      implicit none
      include 'SIZE'
      include 'TSTEP'
      include 'INPUT'
      include 'SOLN'
      include 'ADJOINT'         ! IFADJ
      include 'MASS'

!     local variables
      integer nn, nit
      real ek
      real vtmp(lx1*ly1*lz1*lelt,ldim)
      common /CTMP1/ vtmp

!     functions
      real glsc3
      
      if (ISTEP.eq.0) then
         if (int(UPARAM(1)).eq.1) then
            if (NIO.eq.0) write(*,*) 'Simulation in adjoint mode'
            IFADJ = .TRUE.
         else
            if (NIO.eq.0) write(*,*) 'Simulation in direct mode'
            IFADJ = .FALSE.
         endif
!     initialise runtime parameters
         call chkpt_param_get
         call spng_box_param_get
!     initialise module
!     provide initial velocity condition as reference field for sponge
         nn = lx1*ly1*lz1*lelt*ldim
         call rzero(vtmp,nn)
         call spng_box_init(vtmp(1,1),vtmp(1,2),vtmp(1,ndim))
      endif

!     save/load files for full-restart
      call chkpt_main

!     write perturbation energy
      nit = 10
      if (mod(ISTEP,nit).eq.0) then
         nn = NX1*NY1*NZ1*NELV
         ek =  0.5*(glsc3(VXP,VXP,BM1,nn)+glsc3(VYP,VYP,BM1,nn))
         if (NIO.eq.0) write(*,*) 'Perturbation energy = ',ek,time
      endif

      if (mod(ISTEP,IOSTEP).eq.0) then
         call outpost2(VXP,VYP,VZP,PRP,TP,0,'prt')
      endif

      
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'NEKUSE'
      include 'SOLN'            ! JP
      
      if (JP.eq.0) then
!     base flow
         ux=1.0
         uy=0.0
         uz=0.0
         temp=0.0
      else
!     perturbation
         ux=0.0
         uy=0.0
         uz=0.0
         temp=0.0
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'NEKUSE'
      include 'SOLN'            ! JP
      include 'INPUT'

!     argument list
      integer ix,iy,iz,ieg

!     local variables
      real xl(LDIM)
      real fcoeff(3)            !< coefficients for random distribution
      
      if (JP.eq.0) then
!     base flow; there is no analytical formula, so 
!     it should be read from file during initialisation step
         ux=1.0
         uy=0.0
         uz=0.0
         temp=0
      else
!     perturbation; white noise
         xl(1) = X
         xl(2) = Y
         if (IF3D) xl(NDIM) = Z

         fcoeff(1)=  3.0e4
         fcoeff(2)= -1.5e3
         fcoeff(3)=  0.5e5
         ux=UPARAM(2)*mth_rand(ix,iy,iz,ieg,xl,fcoeff)
         fcoeff(1)=  2.3e4
         fcoeff(2)=  2.3e3
         fcoeff(3)= -2.0e5
         uy=UPARAM(2)*mth_rand(ix,iy,iz,ieg,xl,fcoeff)
         if (IF3D) then
            fcoeff(1)= 2.e4
            fcoeff(2)= 1.e3
            fcoeff(3)= 1.e5
            uz=UPARAM(2)*mth_rand(il,jl,kl,ieg,xl,fcoeff)
         else
            uz = 0.0
         endif

         temp=0.0
      endif
      
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'

      return
      end
c-----------------------------------------------------------------------
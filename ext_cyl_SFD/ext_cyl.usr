!-----------------------------------------------------------------------
!
!  USER SPECIFIED ROUTINES:
!
!     - boundary conditions
!     - initial conditions
!     - variable properties
!     - local acceleration for fluid (a)
!     - forcing function for passive scalar (q)
!     - general purpose routine for checking errors etc.
!
!-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      udiff =0.
      utrans=0.
      return
      end
!-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

!     Note: this is an acceleration term, NOT a force!
!     Thus, ffx will subsequently be multiplied by rho(x,t).

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

!     add SFD forcing
      call sfd_forcing(FFX,FFY,FFZ,ix,iy,iz,ieg)
      
      return
      end
!-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol   = 0.0

      return
      end
!-----------------------------------------------------------------------
      subroutine userchk
      implicit none
      include 'SIZE'
      include 'TSTEP'
      include 'INPUT'
      include 'SOLN'

!     local variables
      real scale
      real x0(3)
      save x0
      data x0 /3*0/

      
      if (ISTEP.eq.0) call frame_start

!     monitor simulation
      call frame_monitor

!     save/load files for full-restart
      call chkpt_main

!     add noise
      call sfd_main

!     write out probes
      if (mod(ISTEP,int(UPARAM(1))).eq.0) call hpts()

!     finalise framework
      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end
      endif
      
      return
      end
!-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
!     NOTE ::: This subroutine MAY NOT be called by every process
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=1.0
      uy=0.0
      uz=0.0
      temp=0.0
      return
      end
!----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=1.0
      uy=0.0
      uz=0.0
      temp=0
      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'

      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'

      return
      end
!-----------------------------------------------------------------------
      subroutine usrdat3
      include 'SIZE'
      include 'TOTAL'

      return
      end
!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     register modules
      call io_register
      call chkpt_register
      call sfd_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'
      include 'SOLN'
!-----------------------------------------------------------------------
!     initialise modules
      call chkpt_init
      call sfd_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     finalise modules
      call sfd_end
      
      return
      end subroutine
!======================================================================



! pipe dimensions: radius and length
#define RAD 0.5
#define ZLENPIPE 15.0
!======================================================================
      subroutine uservp(ix,iy,iz,ieg)
      return
      end subroutine
!======================================================================
      subroutine userf(ix,iy,iz,ieg)
      return
      end subroutine
!======================================================================
      subroutine userq(ix,iy,iz,ieg)
      return
      end subroutine
!======================================================================
      subroutine userchk()
      implicit none

      include 'SIZE'
      include 'GEOM'            ! xm1, ym1, zm1
      include 'SOLN'            ! T
      include 'MASS'            ! BM1
      include 'TSTEP'           ! ISTEP, PI
      include 'INPUT'           ! PARAM(12) (DT)
      include 'OBJDATA'         ! DRAGZ

      ! local variables
      real x0(3)                ! for torque calculations
      save x0
      data x0 /3*0/

      ! object definition
      integer iobj_wall, bIDs(1)
      save iobj_wall

      integer ntot
      real e2, ubar
      real tauw, rho, wall_area

      ! functions
      real glsc2, glsc3
!-----------------------------------------------------------------------
      if (ISTEP.eq.0) then
         bIDs(1) = 2            ! 'W  '
         call create_obj(iobj_wall,bIDs,1) ! define objects for surface integrals
         call frame_start       ! start framework
      endif

      call frame_monitor        ! monitor simulation

      call chkpt_main           ! save/load files for full-restart
      
      call gsem_main            ! synthetic eddy method

      ntot=nx1*ny1*nz1*nelv
      ubar = glsc2(vz,bm1,ntot)/volvm1
      e2   = glsc3(vx,bm1,vx,ntot)+glsc3(vy,bm1,vy,ntot)
      e2   = e2/volvm1
      if(nid.eq.0) write(6,2) time,ubar,e2
 2    format(1p3e13.4,' monitor')

      ! torque
      call torque_calc(1.0,x0,.false.,.false.) ! wall shear
      wall_area=2.*pi*RAD*ZLENPIPE
      tauw=dragz(iobj_wall)/wall_area   !wall shear stress 
      ! Note: we have 2 objects starting from 0. So we do averaging.
      ! To see that, make the 3rd arg in torque_calc .true. 
      rho=1.0
      if (nid.eq.0) write(*,*) 'time, uTau: ',time,sqrt(tauw/rho)

      call lambda2(t(1,1,1,1,1))
  
      ! save initial condition
!      if (istep.eq.0) then
!         call outpost(vx,vy,vz,pr,t,'ini')
!      endif

      if (ISTEP.eq.NSTEPS.or.LASTEP.eq.1) then
         call frame_end         ! finalise framework
      endif
      
      return
      end subroutine
!======================================================================
      subroutine userbc (ix,iy,iz,iside,ieg)
      implicit none

      include 'SIZE'
      include 'NEKUSE'

      integer ix,iy,iz,iside,ieg

      return
      end subroutine
!======================================================================
      subroutine useric (ix,iy,iz,ieg)
      implicit none

      include 'SIZE'  
      include 'NEKUSE'

      integer :: ix,iy,iz,ieg

      uy = 0.
      ux = 0.
      uz = 1.
      
      return
      end subroutine
!======================================================================
      subroutine usrdat
      implicit none

      include 'SIZE'
      include 'GEOM'
      include 'INPUT'

      integer nface,iface,iel

      ! mark boundary type
      nface = 2*ndim
      do iel=1,nelv
         do iface = 1, nface
            if (cbc(iface,iel,1) .eq. 'v  ') then
               boundaryID(iface,iel) = 1
            elseif (cbc(iface,iel,1) .eq. 'W  ') then
               boundaryID(iface,iel) = 2
            elseif (cbc(iface,iel,1) .eq. 'O  ') then
               boundaryID(iface,iel) = 3
            endif
         enddo 
      enddo

      return
      end subroutine
!======================================================================
      subroutine usrdat2
      implicit none

      include 'SIZE'
      include 'GEOM'

!     Rescale incoming pipe to diameter 1 and length 8
      if (nid.eq.0) write(6,*) '## userdat2: Rescale geometry' 
      call rescale_x(xm1,-RAD,RAD)
      call rescale_x(ym1,-RAD,RAD)
      call rescale_x(zm1,0.,ZLENPIPE)

      return
      end subroutine
!======================================================================
      subroutine usrdat3
      implicit none

      return
      end subroutine
!======================================================================
!> @brief Register user specified modules
      subroutine frame_usr_register
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     register modules
      call chkpt_register
      call gsem_register

      return
      end subroutine
!======================================================================
!> @brief Initialise user specified modules
      subroutine frame_usr_init
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------
!     initialise modules
      call chkpt_init
      call gsem_init

      return
      end subroutine
!======================================================================
!> @brief Finalise user specified modules
      subroutine frame_usr_end
      implicit none

      include 'SIZE'
      include 'FRAMELP'
!-----------------------------------------------------------------------

      
      return
      end subroutine
!======================================================================
!> @brief Generate single eddy for a given family
!! @param[out] epos       eddy position
!! @param[out] eps        eddy orientation
!! @param[in]  nfam       family number
!! @param[in]  ifinit     intial distribution
      subroutine usr_gen_eddy(epos,eps,nfam,ifinit)
      implicit none

      include 'SIZE'
      include 'TSTEP'           ! pi
      include 'GSYEMD'

      ! argument list
      real epos(ldim)
      integer eps(ldim)
      integer nfam
      logical ifinit

      ! local variables
      real rho, theta, vrtmp(ldim)
      integer il

      real yp_cut
      parameter (yp_cut=0.45)
      
      ! functions
      real math_ran_rng
!-----------------------------------------------------------------------
      ! get random position with respect to the begining of coordinate system
      ! this must be adapted to considered amily inflow shape (in current example circle)
      rho = yp_cut*sqrt(math_ran_rng(0.0,1.0))  
      theta = math_ran_rng(0.,2.0*pi)

      vrtmp(1) = rho*cos(theta)
      vrtmp(2) = rho*sin(theta)
      if (ifinit) then
         vrtmp(ldim) = math_ran_rng(-gsem_bext(nfam),gsem_bext(nfam))
      else
         vrtmp(ldim) = -gsem_bext(nfam)
      endif

      ! rotate coordinates with respect to family normal
      call math_rot3Da(epos,vrtmp,
     $        gsem_raxs(1,nfam),gsem_rang(nfam))

      ! shift vertex position with respect to family centre
      ! notice; rotation must be done first
      do il=1,ldim
        epos(il) = epos(il) + gsem_bcrd(il,nfam)
      enddo

      ! get random orientation
      do il=1,ldim
         rho = math_ran_rng(0.0,1.0)
         if (rho.gt.0.5) then
            eps(il) = 1
         else
            eps(il) = -1
         endif
      enddo

      return
      end subroutine
!=======================================================================
